{"version":3,"file":"js/957.ba192348.js","mappings":"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","sources":["webpack://gcodeviewer_site/./node_modules/@babylonjs/core/Misc/basis.js","webpack://gcodeviewer_site/./node_modules/@babylonjs/core/Misc/basisWorker.js","webpack://gcodeviewer_site/./node_modules/@babylonjs/core/Materials/Textures/Loaders/basisTextureLoader.js"],"sourcesContent":["import { Tools } from \"./tools.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { InternalTexture } from \"../Materials/Textures/internalTexture.js\";\n\nimport { initializeWebWorker, workerFunction } from \"./basisWorker.js\";\n/**\n * Info about the .basis files\n */\nexport class BasisFileInfo {\n}\n/**\n * Result of transcoding a basis file\n */\nclass TranscodeResult {\n}\n/**\n * Configuration options for the Basis transcoder\n */\nexport class BasisTranscodeConfiguration {\n}\n/**\n * @internal\n * Enum of basis transcoder formats\n */\nvar BASIS_FORMATS;\n(function (BASIS_FORMATS) {\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC1\"] = 0] = \"cTFETC1\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2\"] = 1] = \"cTFETC2\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC1\"] = 2] = \"cTFBC1\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC3\"] = 3] = \"cTFBC3\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC4\"] = 4] = \"cTFBC4\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC5\"] = 5] = \"cTFBC5\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC7\"] = 6] = \"cTFBC7\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC1_4_RGB\"] = 8] = \"cTFPVRTC1_4_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC1_4_RGBA\"] = 9] = \"cTFPVRTC1_4_RGBA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFASTC_4x4\"] = 10] = \"cTFASTC_4x4\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFATC_RGB\"] = 11] = \"cTFATC_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFATC_RGBA_INTERPOLATED_ALPHA\"] = 12] = \"cTFATC_RGBA_INTERPOLATED_ALPHA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGBA32\"] = 13] = \"cTFRGBA32\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGB565\"] = 14] = \"cTFRGB565\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBGR565\"] = 15] = \"cTFBGR565\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGBA4444\"] = 16] = \"cTFRGBA4444\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFFXT1_RGB\"] = 17] = \"cTFFXT1_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC2_4_RGB\"] = 18] = \"cTFPVRTC2_4_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC2_4_RGBA\"] = 19] = \"cTFPVRTC2_4_RGBA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2_EAC_R11\"] = 20] = \"cTFETC2_EAC_R11\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2_EAC_RG11\"] = 21] = \"cTFETC2_EAC_RG11\";\n})(BASIS_FORMATS || (BASIS_FORMATS = {}));\n/**\n * Used to load .Basis files\n * See https://github.com/BinomialLLC/basis_universal/tree/master/webgl\n */\nexport const BasisToolsOptions = {\n    /**\n     * URL to use when loading the basis transcoder\n     */\n    JSModuleURL: `${Tools._DefaultCdnUrl}/basisTranscoder/1/basis_transcoder.js`,\n    /**\n     * URL to use when loading the wasm module for the transcoder\n     */\n    WasmModuleURL: `${Tools._DefaultCdnUrl}/basisTranscoder/1/basis_transcoder.wasm`,\n};\n/**\n * Get the internal format to be passed to texImage2D corresponding to the .basis format value\n * @param basisFormat format chosen from GetSupportedTranscodeFormat\n * @param engine\n * @returns internal format corresponding to the Basis format\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const GetInternalFormatFromBasisFormat = (basisFormat, engine) => {\n    let format;\n    switch (basisFormat) {\n        case BASIS_FORMATS.cTFETC1:\n            format = 36196;\n            break;\n        case BASIS_FORMATS.cTFBC1:\n            format = 33776;\n            break;\n        case BASIS_FORMATS.cTFBC4:\n            format = 33779;\n            break;\n        case BASIS_FORMATS.cTFASTC_4x4:\n            format = 37808;\n            break;\n        case BASIS_FORMATS.cTFETC2:\n            format = 37496;\n            break;\n        case BASIS_FORMATS.cTFBC7:\n            format = 36492;\n            break;\n    }\n    if (format === undefined) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"The chosen Basis transcoder format is not currently supported\";\n    }\n    return format;\n};\nlet _WorkerPromise = null;\nlet _Worker = null;\nlet _actionId = 0;\nconst _IgnoreSupportedFormats = false;\nconst _CreateWorkerAsync = () => {\n    if (!_WorkerPromise) {\n        _WorkerPromise = new Promise((res, reject) => {\n            if (_Worker) {\n                res(_Worker);\n            }\n            else {\n                Tools.LoadFileAsync(Tools.GetBabylonScriptURL(BasisToolsOptions.WasmModuleURL))\n                    .then((wasmBinary) => {\n                    if (typeof URL !== \"function\") {\n                        return reject(\"Basis transcoder requires an environment with a URL constructor\");\n                    }\n                    const workerBlobUrl = URL.createObjectURL(new Blob([`(${workerFunction})()`], { type: \"application/javascript\" }));\n                    _Worker = new Worker(workerBlobUrl);\n                    initializeWebWorker(_Worker, wasmBinary, BasisToolsOptions.JSModuleURL).then(res, reject);\n                })\n                    .catch(reject);\n            }\n        });\n    }\n    return _WorkerPromise;\n};\n/**\n * Set the worker to use for transcoding\n * @param worker The worker that will be used for transcoding\n */\nexport const SetBasisTranscoderWorker = (worker) => {\n    _Worker = worker;\n};\n/**\n * Transcodes a loaded image file to compressed pixel data\n * @param data image data to transcode\n * @param config configuration options for the transcoding\n * @returns a promise resulting in the transcoded image\n */\nexport const TranscodeAsync = (data, config) => {\n    const dataView = data instanceof ArrayBuffer ? new Uint8Array(data) : data;\n    return new Promise((res, rej) => {\n        _CreateWorkerAsync().then(() => {\n            const actionId = _actionId++;\n            const messageHandler = (msg) => {\n                if (msg.data.action === \"transcode\" && msg.data.id === actionId) {\n                    _Worker.removeEventListener(\"message\", messageHandler);\n                    if (!msg.data.success) {\n                        rej(\"Transcode is not supported on this device\");\n                    }\n                    else {\n                        res(msg.data);\n                    }\n                }\n            };\n            _Worker.addEventListener(\"message\", messageHandler);\n            const dataViewCopy = new Uint8Array(dataView.byteLength);\n            dataViewCopy.set(new Uint8Array(dataView.buffer, dataView.byteOffset, dataView.byteLength));\n            _Worker.postMessage({ action: \"transcode\", id: actionId, imageData: dataViewCopy, config: config, ignoreSupportedFormats: _IgnoreSupportedFormats }, [\n                dataViewCopy.buffer,\n            ]);\n        }, (error) => {\n            rej(error);\n        });\n    });\n};\n/**\n * Binds a texture according to its underlying target.\n * @param texture texture to bind\n * @param engine the engine to bind the texture in\n */\nconst BindTexture = (texture, engine) => {\n    let target = engine._gl?.TEXTURE_2D;\n    if (texture.isCube) {\n        target = engine._gl?.TEXTURE_CUBE_MAP;\n    }\n    engine._bindTextureDirectly(target, texture, true);\n};\n/**\n * Loads a texture from the transcode result\n * @param texture texture load to\n * @param transcodeResult the result of transcoding the basis file to load from\n */\nexport const LoadTextureFromTranscodeResult = (texture, transcodeResult) => {\n    const engine = texture.getEngine();\n    for (let i = 0; i < transcodeResult.fileInfo.images.length; i++) {\n        const rootImage = transcodeResult.fileInfo.images[i].levels[0];\n        texture._invertVScale = texture.invertY;\n        if (transcodeResult.format === -1 || transcodeResult.format === BASIS_FORMATS.cTFRGB565) {\n            // No compatable compressed format found, fallback to RGB\n            texture.type = 10;\n            texture.format = 4;\n            if (engine._features.basisNeedsPOT && (Math.log2(rootImage.width) % 1 !== 0 || Math.log2(rootImage.height) % 1 !== 0)) {\n                // Create non power of two texture\n                const source = new InternalTexture(engine, 2 /* InternalTextureSource.Temp */);\n                texture._invertVScale = texture.invertY;\n                source.type = 10;\n                source.format = 4;\n                // Fallback requires aligned width/height\n                source.width = (rootImage.width + 3) & ~3;\n                source.height = (rootImage.height + 3) & ~3;\n                BindTexture(source, engine);\n                engine._uploadDataToTextureDirectly(source, new Uint16Array(rootImage.transcodedPixels.buffer), i, 0, 4, true);\n                // Resize to power of two\n                engine._rescaleTexture(source, texture, engine.scenes[0], engine._getInternalFormat(4), () => {\n                    engine._releaseTexture(source);\n                    BindTexture(texture, engine);\n                });\n            }\n            else {\n                // Fallback is already inverted\n                texture._invertVScale = !texture.invertY;\n                // Upload directly\n                texture.width = (rootImage.width + 3) & ~3;\n                texture.height = (rootImage.height + 3) & ~3;\n                texture.samplingMode = 2;\n                BindTexture(texture, engine);\n                engine._uploadDataToTextureDirectly(texture, new Uint16Array(rootImage.transcodedPixels.buffer), i, 0, 4, true);\n            }\n        }\n        else {\n            texture.width = rootImage.width;\n            texture.height = rootImage.height;\n            texture.generateMipMaps = transcodeResult.fileInfo.images[i].levels.length > 1;\n            const format = BasisTools.GetInternalFormatFromBasisFormat(transcodeResult.format, engine);\n            texture.format = format;\n            BindTexture(texture, engine);\n            // Upload all mip levels in the file\n            transcodeResult.fileInfo.images[i].levels.forEach((level, index) => {\n                engine._uploadCompressedDataToTextureDirectly(texture, format, level.width, level.height, level.transcodedPixels, i, index);\n            });\n            if (engine._features.basisNeedsPOT && (Math.log2(texture.width) % 1 !== 0 || Math.log2(texture.height) % 1 !== 0)) {\n                Tools.Warn(\"Loaded .basis texture width and height are not a power of two. Texture wrapping will be set to Texture.CLAMP_ADDRESSMODE as other modes are not supported with non power of two dimensions in webGL 1.\");\n                texture._cachedWrapU = Texture.CLAMP_ADDRESSMODE;\n                texture._cachedWrapV = Texture.CLAMP_ADDRESSMODE;\n            }\n        }\n    }\n};\n/**\n * Used to load .Basis files\n * See https://github.com/BinomialLLC/basis_universal/tree/master/webgl\n */\nexport const BasisTools = {\n    /**\n     * URL to use when loading the basis transcoder\n     */\n    JSModuleURL: BasisToolsOptions.JSModuleURL,\n    /**\n     * URL to use when loading the wasm module for the transcoder\n     */\n    WasmModuleURL: BasisToolsOptions.WasmModuleURL,\n    /**\n     * Get the internal format to be passed to texImage2D corresponding to the .basis format value\n     * @param basisFormat format chosen from GetSupportedTranscodeFormat\n     * @returns internal format corresponding to the Basis format\n     */\n    GetInternalFormatFromBasisFormat,\n    /**\n     * Transcodes a loaded image file to compressed pixel data\n     * @param data image data to transcode\n     * @param config configuration options for the transcoding\n     * @returns a promise resulting in the transcoded image\n     */\n    TranscodeAsync,\n    /**\n     * Loads a texture from the transcode result\n     * @param texture texture load to\n     * @param transcodeResult the result of transcoding the basis file to load from\n     */\n    LoadTextureFromTranscodeResult,\n};\nObject.defineProperty(BasisTools, \"JSModuleURL\", {\n    get: function () {\n        return BasisToolsOptions.JSModuleURL;\n    },\n    set: function (value) {\n        BasisToolsOptions.JSModuleURL = value;\n    },\n});\nObject.defineProperty(BasisTools, \"WasmModuleURL\", {\n    get: function () {\n        return BasisToolsOptions.WasmModuleURL;\n    },\n    set: function (value) {\n        BasisToolsOptions.WasmModuleURL = value;\n    },\n});\n//# sourceMappingURL=basis.js.map","import { Tools } from \"./tools.js\";\n/**\n * The worker function that gets converted to a blob url to pass into a worker.\n * To be used if a developer wants to create their own worker instance and inject it instead of using the default worker.\n */\nexport function workerFunction() {\n    const _BASIS_FORMAT = {\n        cTFETC1: 0,\n        cTFETC2: 1,\n        cTFBC1: 2,\n        cTFBC3: 3,\n        cTFBC4: 4,\n        cTFBC5: 5,\n        cTFBC7: 6,\n        cTFPVRTC1_4_RGB: 8,\n        cTFPVRTC1_4_RGBA: 9,\n        cTFASTC_4x4: 10,\n        cTFATC_RGB: 11,\n        cTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n        cTFRGBA32: 13,\n        cTFRGB565: 14,\n        cTFBGR565: 15,\n        cTFRGBA4444: 16,\n        cTFFXT1_RGB: 17,\n        cTFPVRTC2_4_RGB: 18,\n        cTFPVRTC2_4_RGBA: 19,\n        cTFETC2_EAC_R11: 20,\n        cTFETC2_EAC_RG11: 21,\n    };\n    let transcoderModulePromise = null;\n    onmessage = (event) => {\n        if (event.data.action === \"init\") {\n            // Load the transcoder if it hasn't been yet\n            if (event.data.url) {\n                // make sure we loaded the script correctly\n                try {\n                    importScripts(event.data.url);\n                }\n                catch (e) {\n                    postMessage({ action: \"error\", error: e });\n                }\n            }\n            if (!transcoderModulePromise) {\n                transcoderModulePromise = BASIS({\n                    // Override wasm binary\n                    wasmBinary: event.data.wasmBinary,\n                });\n            }\n            if (transcoderModulePromise !== null) {\n                transcoderModulePromise.then((m) => {\n                    BASIS = m;\n                    m.initializeBasis();\n                    postMessage({ action: \"init\" });\n                });\n            }\n        }\n        else if (event.data.action === \"transcode\") {\n            // Transcode the basis image and return the resulting pixels\n            const config = event.data.config;\n            const imgData = event.data.imageData;\n            const loadedFile = new BASIS.BasisFile(imgData);\n            const fileInfo = GetFileInfo(loadedFile);\n            let format = event.data.ignoreSupportedFormats ? null : GetSupportedTranscodeFormat(event.data.config, fileInfo);\n            let needsConversion = false;\n            if (format === null) {\n                needsConversion = true;\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFBC3 : _BASIS_FORMAT.cTFBC1;\n            }\n            // Begin transcode\n            let success = true;\n            if (!loadedFile.startTranscoding()) {\n                success = false;\n            }\n            const buffers = [];\n            for (let imageIndex = 0; imageIndex < fileInfo.images.length; imageIndex++) {\n                if (!success) {\n                    break;\n                }\n                const image = fileInfo.images[imageIndex];\n                if (config.loadSingleImage === undefined || config.loadSingleImage === imageIndex) {\n                    let mipCount = image.levels.length;\n                    if (config.loadMipmapLevels === false) {\n                        mipCount = 1;\n                    }\n                    for (let levelIndex = 0; levelIndex < mipCount; levelIndex++) {\n                        const levelInfo = image.levels[levelIndex];\n                        const pixels = TranscodeLevel(loadedFile, imageIndex, levelIndex, format, needsConversion);\n                        if (!pixels) {\n                            success = false;\n                            break;\n                        }\n                        levelInfo.transcodedPixels = pixels;\n                        buffers.push(levelInfo.transcodedPixels.buffer);\n                    }\n                }\n            }\n            // Close file\n            loadedFile.close();\n            loadedFile.delete();\n            if (needsConversion) {\n                format = -1;\n            }\n            if (!success) {\n                postMessage({ action: \"transcode\", success: success, id: event.data.id });\n            }\n            else {\n                postMessage({ action: \"transcode\", success: success, id: event.data.id, fileInfo: fileInfo, format: format }, buffers);\n            }\n        }\n    };\n    /**\n     * Detects the supported transcode format for the file\n     * @param config transcode config\n     * @param fileInfo info about the file\n     * @returns the chosed format or null if none are supported\n     */\n    function GetSupportedTranscodeFormat(config, fileInfo) {\n        let format = null;\n        if (config.supportedCompressionFormats) {\n            if (config.supportedCompressionFormats.astc) {\n                format = _BASIS_FORMAT.cTFASTC_4x4;\n            }\n            else if (config.supportedCompressionFormats.bc7) {\n                format = _BASIS_FORMAT.cTFBC7;\n            }\n            else if (config.supportedCompressionFormats.s3tc) {\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFBC3 : _BASIS_FORMAT.cTFBC1;\n            }\n            else if (config.supportedCompressionFormats.pvrtc) {\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFPVRTC1_4_RGBA : _BASIS_FORMAT.cTFPVRTC1_4_RGB;\n            }\n            else if (config.supportedCompressionFormats.etc2) {\n                format = _BASIS_FORMAT.cTFETC2;\n            }\n            else if (config.supportedCompressionFormats.etc1) {\n                format = _BASIS_FORMAT.cTFETC1;\n            }\n            else {\n                format = _BASIS_FORMAT.cTFRGB565;\n            }\n        }\n        return format;\n    }\n    /**\n     * Retrieves information about the basis file eg. dimensions\n     * @param basisFile the basis file to get the info from\n     * @returns information about the basis file\n     */\n    function GetFileInfo(basisFile) {\n        const hasAlpha = basisFile.getHasAlpha();\n        const imageCount = basisFile.getNumImages();\n        const images = [];\n        for (let i = 0; i < imageCount; i++) {\n            const imageInfo = {\n                levels: [],\n            };\n            const levelCount = basisFile.getNumLevels(i);\n            for (let level = 0; level < levelCount; level++) {\n                const levelInfo = {\n                    width: basisFile.getImageWidth(i, level),\n                    height: basisFile.getImageHeight(i, level),\n                };\n                imageInfo.levels.push(levelInfo);\n            }\n            images.push(imageInfo);\n        }\n        const info = { hasAlpha, images };\n        return info;\n    }\n    function TranscodeLevel(loadedFile, imageIndex, levelIndex, format, convertToRgb565) {\n        const dstSize = loadedFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, format);\n        let dst = new Uint8Array(dstSize);\n        if (!loadedFile.transcodeImage(dst, imageIndex, levelIndex, format, 1, 0)) {\n            return null;\n        }\n        // If no supported format is found, load as dxt and convert to rgb565\n        if (convertToRgb565) {\n            const alignedWidth = (loadedFile.getImageWidth(imageIndex, levelIndex) + 3) & ~3;\n            const alignedHeight = (loadedFile.getImageHeight(imageIndex, levelIndex) + 3) & ~3;\n            dst = ConvertDxtToRgb565(dst, 0, alignedWidth, alignedHeight);\n        }\n        return dst;\n    }\n    /**\n     * From https://github.com/BinomialLLC/basis_universal/blob/master/webgl/texture/dxt-to-rgb565.js\n     * An unoptimized version of dxtToRgb565.  Also, the floating\n     * point math used to compute the colors actually results in\n     * slightly different colors compared to hardware DXT decoders.\n     * @param src dxt src pixels\n     * @param srcByteOffset offset for the start of src\n     * @param  width aligned width of the image\n     * @param  height aligned height of the image\n     * @returns the converted pixels\n     */\n    function ConvertDxtToRgb565(src, srcByteOffset, width, height) {\n        const c = new Uint16Array(4);\n        const dst = new Uint16Array(width * height);\n        const blockWidth = width / 4;\n        const blockHeight = height / 4;\n        for (let blockY = 0; blockY < blockHeight; blockY++) {\n            for (let blockX = 0; blockX < blockWidth; blockX++) {\n                const i = srcByteOffset + 8 * (blockY * blockWidth + blockX);\n                c[0] = src[i] | (src[i + 1] << 8);\n                c[1] = src[i + 2] | (src[i + 3] << 8);\n                c[2] =\n                    ((2 * (c[0] & 0x1f) + 1 * (c[1] & 0x1f)) / 3) |\n                        (((2 * (c[0] & 0x7e0) + 1 * (c[1] & 0x7e0)) / 3) & 0x7e0) |\n                        (((2 * (c[0] & 0xf800) + 1 * (c[1] & 0xf800)) / 3) & 0xf800);\n                c[3] =\n                    ((2 * (c[1] & 0x1f) + 1 * (c[0] & 0x1f)) / 3) |\n                        (((2 * (c[1] & 0x7e0) + 1 * (c[0] & 0x7e0)) / 3) & 0x7e0) |\n                        (((2 * (c[1] & 0xf800) + 1 * (c[0] & 0xf800)) / 3) & 0xf800);\n                for (let row = 0; row < 4; row++) {\n                    const m = src[i + 4 + row];\n                    let dstI = (blockY * 4 + row) * width + blockX * 4;\n                    dst[dstI++] = c[m & 0x3];\n                    dst[dstI++] = c[(m >> 2) & 0x3];\n                    dst[dstI++] = c[(m >> 4) & 0x3];\n                    dst[dstI++] = c[(m >> 6) & 0x3];\n                }\n            }\n        }\n        return dst;\n    }\n}\n/**\n * Initialize a web worker with the basis transcoder\n * @param worker the worker to initialize\n * @param wasmBinary the wasm binary to load into the worker\n * @param moduleUrl the url to the basis transcoder module\n * @returns a promise that resolves when the worker is initialized\n */\nexport function initializeWebWorker(worker, wasmBinary, moduleUrl) {\n    return new Promise((res, reject) => {\n        const initHandler = (msg) => {\n            if (msg.data.action === \"init\") {\n                worker.removeEventListener(\"message\", initHandler);\n                res(worker);\n            }\n            else if (msg.data.action === \"error\") {\n                reject(msg.data.error || \"error initializing worker\");\n            }\n        };\n        worker.addEventListener(\"message\", initHandler);\n        // we can use transferable objects here because the worker will own the ArrayBuffer\n        worker.postMessage({ action: \"init\", url: moduleUrl ? Tools.GetBabylonScriptURL(moduleUrl) : undefined, wasmBinary }, [wasmBinary]);\n    });\n}\n//# sourceMappingURL=basisWorker.js.map","import { LoadTextureFromTranscodeResult, TranscodeAsync } from \"../../../Misc/basis.js\";\nimport { Tools } from \"../../../Misc/tools.js\";\n/**\n * Loader for .basis file format\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _BasisTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     * @param onError defines the callback to trigger in case of error\n     */\n    loadCubeData(data, texture, createPolynomials, onLoad, onError) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        const caps = texture.getEngine().getCaps();\n        const transcodeConfig = {\n            supportedCompressionFormats: {\n                etc1: caps.etc1 ? true : false,\n                s3tc: caps.s3tc ? true : false,\n                pvrtc: caps.pvrtc ? true : false,\n                etc2: caps.etc2 ? true : false,\n                astc: caps.astc ? true : false,\n                bc7: caps.bptc ? true : false,\n            },\n        };\n        TranscodeAsync(data, transcodeConfig)\n            .then((result) => {\n            const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n            LoadTextureFromTranscodeResult(texture, result);\n            texture.getEngine()._setCubeMapTextureParams(texture, hasMipmap);\n            texture.isReady = true;\n            texture.onLoadedObservable.notifyObservers(texture);\n            texture.onLoadedObservable.clear();\n            if (onLoad) {\n                onLoad();\n            }\n        })\n            .catch((err) => {\n            const errorMessage = \"Failed to transcode Basis file, transcoding may not be supported on this device\";\n            Tools.Warn(errorMessage);\n            texture.isReady = true;\n            if (onError) {\n                onError(err);\n            }\n        });\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    loadData(data, texture, callback) {\n        const caps = texture.getEngine().getCaps();\n        const transcodeConfig = {\n            supportedCompressionFormats: {\n                etc1: caps.etc1 ? true : false,\n                s3tc: caps.s3tc ? true : false,\n                pvrtc: caps.pvrtc ? true : false,\n                etc2: caps.etc2 ? true : false,\n                astc: caps.astc ? true : false,\n                bc7: caps.bptc ? true : false,\n            },\n        };\n        TranscodeAsync(data, transcodeConfig)\n            .then((result) => {\n            const rootImage = result.fileInfo.images[0].levels[0];\n            const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n            callback(rootImage.width, rootImage.height, hasMipmap, result.format !== -1, () => {\n                LoadTextureFromTranscodeResult(texture, result);\n            });\n        })\n            .catch((err) => {\n            Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\n            Tools.Warn(`Failed to transcode Basis file: ${err}`);\n            callback(0, 0, false, false, () => { }, true);\n        });\n    }\n}\n//# sourceMappingURL=basisTextureLoader.js.map"],"names":["BASIS_FORMATS","workerFunction","_BASIS_FORMAT","cTFETC1","cTFETC2","cTFBC1","cTFBC3","cTFBC4","cTFBC5","cTFBC7","cTFPVRTC1_4_RGB","cTFPVRTC1_4_RGBA","cTFASTC_4x4","cTFATC_RGB","cTFATC_RGBA_INTERPOLATED_ALPHA","cTFRGBA32","cTFRGB565","cTFBGR565","cTFRGBA4444","cTFFXT1_RGB","cTFPVRTC2_4_RGB","cTFPVRTC2_4_RGBA","cTFETC2_EAC_R11","cTFETC2_EAC_RG11","transcoderModulePromise","GetSupportedTranscodeFormat","config","fileInfo","format","supportedCompressionFormats","astc","bc7","s3tc","hasAlpha","pvrtc","etc2","etc1","GetFileInfo","basisFile","getHasAlpha","imageCount","getNumImages","images","i","imageInfo","levels","levelCount","getNumLevels","level","levelInfo","width","getImageWidth","height","getImageHeight","push","info","TranscodeLevel","loadedFile","imageIndex","levelIndex","convertToRgb565","dstSize","getImageTranscodedSizeInBytes","dst","Uint8Array","transcodeImage","alignedWidth","alignedHeight","ConvertDxtToRgb565","src","srcByteOffset","c","Uint16Array","blockWidth","blockHeight","blockY","blockX","row","m","dstI","onmessage","event","data","action","url","importScripts","e","postMessage","error","BASIS","wasmBinary","then","initializeBasis","imgData","imageData","BasisFile","ignoreSupportedFormats","needsConversion","success","startTranscoding","buffers","length","image","undefined","loadSingleImage","mipCount","loadMipmapLevels","pixels","transcodedPixels","buffer","close","delete","id","initializeWebWorker","worker","moduleUrl","Promise","res","reject","initHandler","msg","removeEventListener","addEventListener","BasisToolsOptions","JSModuleURL","WasmModuleURL","GetInternalFormatFromBasisFormat","basisFormat","engine","_WorkerPromise","_Worker","_actionId","_IgnoreSupportedFormats","_CreateWorkerAsync","URL","workerBlobUrl","createObjectURL","Blob","type","Worker","catch","TranscodeAsync","dataView","ArrayBuffer","rej","actionId","messageHandler","dataViewCopy","byteLength","set","byteOffset","BindTexture","texture","target","_gl","TEXTURE_2D","isCube","TEXTURE_CUBE_MAP","_bindTextureDirectly","LoadTextureFromTranscodeResult","transcodeResult","getEngine","rootImage","_invertVScale","invertY","_features","basisNeedsPOT","Math","log2","samplingMode","_uploadDataToTextureDirectly","source","_rescaleTexture","scenes","_getInternalFormat","_releaseTexture","generateMipMaps","BasisTools","forEach","index","_uploadCompressedDataToTextureDirectly","_cachedWrapU","_cachedWrapV","Object","defineProperty","get","value","_BasisTextureLoader","constructor","this","supportCascades","loadCubeData","createPolynomials","onLoad","onError","Array","isArray","caps","getCaps","transcodeConfig","bptc","result","hasMipmap","_setCubeMapTextureParams","isReady","onLoadedObservable","notifyObservers","clear","err","errorMessage","loadData","callback"],"sourceRoot":""}